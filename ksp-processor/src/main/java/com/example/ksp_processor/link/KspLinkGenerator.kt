/*
 * Copyright (c) 2022 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.ksp_processor.link

import com.example.kps_annotations.KspLink
import com.example.kps_annotations.KspLinkName
import com.google.devtools.ksp.KSTypeNotPresentException
import com.google.devtools.ksp.KspExperimental
import com.google.devtools.ksp.getAnnotationsByType
import com.google.devtools.ksp.isConstructor
import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.KSPLogger
import com.google.devtools.ksp.processing.Resolver
import com.google.devtools.ksp.processing.SymbolProcessor
import com.google.devtools.ksp.symbol.ClassKind
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSCallableReference
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSFunctionDeclaration
import com.google.devtools.ksp.symbol.KSType
import com.google.devtools.ksp.symbol.KSValueParameter
import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.CodeBlock
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.TypeName
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.ksp.toClassName
import com.squareup.kotlinpoet.ksp.toTypeName
import com.squareup.kotlinpoet.ksp.writeTo
import java.lang.reflect.Type
import kotlin.math.log

class KspLinkGenerator(
    private val codeGenerator: CodeGenerator,
    private val logger: KSPLogger
) : SymbolProcessor {
    override fun process(resolver: Resolver): List<KSAnnotated> {
        val annotated = resolver.getSymbolsWithAnnotation<KspLink>()
            .filterIsInstance<KSClassDeclaration>()

        for (item in annotated) {
            generateBuilderClass(item)
        }

        return emptyList()
    }

    @OptIn(KspExperimental::class)
    private fun generateBuilderClass(cls: KSClassDeclaration) {
        runCatching {
            cls.getAnnotationsByType(KspLink::class).first().kClass
        }.onSuccess {
            error("${cls.simpleName} property is not member of KClass")
        }.onFailure { e ->
            if (e is KSTypeNotPresentException) {
                val declaration = e.ksType.declaration
                if (declaration is KSClassDeclaration) {
                    parseKSClassDeclaration(cls, declaration)
                } else {
                    // TODO 에러 처리
                }
            }
        }
    }

    /**
     * KSClassDeclaration의 생성자가 요구하는 Data Class의 형식인지 판단하는 함수
     */
    @OptIn(KspExperimental::class)
    private fun parseKSClassDeclaration(cls: KSClassDeclaration, ksClass: KSClassDeclaration) {
        val primaryConstructor = ksClass.getAllFunctions()
            .filter { it.isConstructor() }
            .firstOrNull() ?: error("") // TODO 에러처리
        val fromProperties = primaryConstructor.parameters

        for (property in fromProperties) {
            val linkName = property.getAnnotationsByType(KspLinkName::class).firstOrNull()
            if (linkName != null) {
                linkName.name
            } else {
                // TODO 에러처리
            }
        }

        val className = ksClass.toClassName()

        val packageName = cls.packageName.asString()
        val simpleName = cls.simpleName.asString()

        val linkerName = "${simpleName}Linker"
        val linkerClassName = ClassName(packageName, linkerName)

//        val deprecated = annotation.deprecated

        val properties = cls.getAllProperties()
        properties.forEach {
            val b = it.getAnnotationsByType(KspLinkName::class).firstOrNull()?.name
            logger.d("${it} $b ")
        }
        val params = cls.primaryConstructor?.parameters.orEmpty().also {

        }

        val propertyNames = params.map { it.name?.asString() }

        FileSpec.builder(packageName, linkerName).toastIndent()
            .addFileComment("This code was generated by ksp-builder-gen. Do not modify.")
            .addType(
                TypeSpec.classBuilder(linkerClassName).apply {

                    val classNames = ClassName(packageName, simpleName)

                    val temp = propertyNames.map {
                        "$it = entity.$it"
                    }
                    val constructorParams =
                        """
                            ${temp.joinToString()}    
                        """.trimIndent()

                    val constructorParams2 = propertyNames.joinToString {
                        "$it = " + """
                           ""
                        """.trimIndent()
                    }

                    val function1 = FunSpec.builder("build").apply {
                        returns(classNames)
                        addParameter("entity", className)
                        addStatement("return %T($constructorParams)", classNames)
                    }.build()

                    addFunction(function1)
                }.build()
            )
            .build()
            .writeTo(codeGenerator, Dependencies(aggregating = false, cls.containingFile!!))
    }

    private fun FileSpec.Builder.toastIndent() = indent(" ".repeat(4))

    private inline fun <reified T : Annotation> Resolver.getSymbolsWithAnnotation() =
        getSymbolsWithAnnotation(T::class.qualifiedName!!)

    private fun KSPLogger.d(msg: Any?) {
        warn("---------------------------------------------------------------------------------------")
        warn("Message: $msg")
        warn("---------------------------------------------------------------------------------------")
    }
}
