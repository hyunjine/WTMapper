/*
 * Copyright (c) 2022 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.ksp_processor.link

import com.example.kps_annotations.KspLink
import com.google.devtools.ksp.KspExperimental
import com.google.devtools.ksp.getAnnotationsByType
import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.KSPLogger
import com.google.devtools.ksp.processing.Resolver
import com.google.devtools.ksp.processing.SymbolProcessor
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.ksp.writeTo
import java.lang.reflect.Type

class KspLinkGenerator(
    private val codeGenerator: CodeGenerator,
    private val logger: KSPLogger
) : SymbolProcessor {
    override fun process(resolver: Resolver): List<KSAnnotated> {
        val annotated = resolver.getSymbolsWithAnnotation<KspLink>()
            .filterIsInstance<KSClassDeclaration>()

        for (item in annotated) {
            generateBuilderClass(item)
        }

        return emptyList()
    }

    @OptIn(KspExperimental::class)
    private fun generateBuilderClass(cls: KSClassDeclaration) {
        val annotation = cls.getAnnotationsByType(KspLink::class).first()

        val packageName = cls.packageName.asString()
        val simpleName = cls.simpleName.asString()

        val builderName = annotation.name.ifEmpty { "${simpleName}Builder" }
        val builderClassName = ClassName(packageName, builderName)

        val deprecated = annotation.deprecated

        val params = cls.primaryConstructor?.parameters.orEmpty()

        val paramsName = params.map { it.name?.asString() }

        FileSpec.builder(packageName, builderName).toastIndent()
            .addFileComment("This code was generated by ksp-builder-gen. Do not modify.")
            .addType(
                TypeSpec.classBuilder(builderClassName).apply {
                    if (deprecated) {
                        addAnnotation(
                            AnnotationSpec.builder(Deprecated::class)
                                .addMember("message = %S", "Prefer to construct ${simpleName} directly")
                                .build()
                        )
                    }

                    val className = ClassName(packageName, simpleName)

                    val constructorParams = paramsName.joinToString {
                        "$it = " + """
                           "" 
                        """.trimIndent()
                    }


                    val function1 = FunSpec.builder("build").returns(className)
                        .addStatement("return %T($constructorParams)", className)
                        .build()

                    val function2 = FunSpec.builder("build").returns(Int::class)
                        .addCode(constructorParams)
//                        .addStatement("return %T($constructorParams)", Int::class)
                        .build()

                    addFunction(function1)
                }.build()
            )
            .build().writeTo(codeGenerator, Dependencies(aggregating = false, cls.containingFile!!))
    }

    private fun String.quotation(): String {
        return """
            $this
        """.trimIndent()
    }

    private fun FileSpec.Builder.toastIndent() = indent(" ".repeat(4))

    private inline fun <reified T : Annotation> Resolver.getSymbolsWithAnnotation() =
        getSymbolsWithAnnotation(T::class.qualifiedName!!)

    private fun KSPLogger.d(msg: Any?) {
        warn("---------------------------------------------------------------------------------------")
        warn("Message: $msg")
        warn("---------------------------------------------------------------------------------------")
    }
}
