/*
 * Copyright (c) 2022 Toast Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.ksp_processor.link

import com.example.kps_annotations.KspLink
import com.example.kps_annotations.KspLinkName
import com.google.devtools.ksp.KSTypeNotPresentException
import com.google.devtools.ksp.KspExperimental
import com.google.devtools.ksp.getAnnotationsByType
import com.google.devtools.ksp.isConstructor
import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.KSPLogger
import com.google.devtools.ksp.processing.Resolver
import com.google.devtools.ksp.processing.SymbolProcessor
import com.google.devtools.ksp.symbol.ClassKind
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSCallableReference
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSFunctionDeclaration
import com.google.devtools.ksp.symbol.KSType
import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.CodeBlock
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.TypeName
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.ksp.toClassName
import com.squareup.kotlinpoet.ksp.toTypeName
import com.squareup.kotlinpoet.ksp.writeTo
import java.lang.reflect.Type
import kotlin.math.log

class KspLinkGenerator(
    private val codeGenerator: CodeGenerator,
    private val logger: KSPLogger
) : SymbolProcessor {
    override fun process(resolver: Resolver): List<KSAnnotated> {
        val annotated = resolver.getSymbolsWithAnnotation<KspLink>()
            .filterIsInstance<KSClassDeclaration>()

        for (item in annotated) {
            generateBuilderClass(item)
        }

        return emptyList()
    }

    @OptIn(KspExperimental::class)
    private fun generateBuilderClass(cls: KSClassDeclaration) {
        runCatching {
            cls.getAnnotationsByType(KspLink::class).first().kClass
        }.onSuccess {
            logger.d("onSuccess? $it")
        }.onFailure { e ->
            if (e is KSTypeNotPresentException) {
                val declaration = e.ksType.declaration
                if (declaration is KSClassDeclaration && declaration.classKind == ClassKind.CLASS) {
                    val d = declaration.getAllFunctions()
                        .filter { it.isConstructor() }.firstOrNull()
                    d?.parameters?.forEach {
                        logger.d("it yest ~ $it ${it.getAnnotationsByType(KspLinkName::class).firstOrNull()?.name}")
                    }
                }

                val typeName = e.ksType.toTypeName()

                val packageName = cls.packageName.asString()
                val simpleName = cls.simpleName.asString()

                val builderName = "${simpleName}Builder"
                val builderClassName = ClassName(packageName, builderName)

//        val deprecated = annotation.deprecated

                val properties = cls.getAllProperties()
                properties.forEach {
                    val b = it.getAnnotationsByType(KspLinkName::class).firstOrNull()?.name
                    logger.d("${it} $b ")
                }
                val params = cls.primaryConstructor?.parameters.orEmpty().also {

                }

                val propertyNames = params.map { it.name?.asString() }

                FileSpec.builder(packageName, builderName).toastIndent()
                    .addFileComment("This code was generated by ksp-builder-gen. Do not modify.")
                    .addType(
                        TypeSpec.classBuilder(builderClassName).apply {

                            val className = ClassName(packageName, simpleName)

                            val constructorParams = propertyNames.joinToString {
                                "$it = " + """
                           "" 
                        """.trimIndent()
                            }

                            val paramSpecS = listOf(
                                ParameterSpec.builder("name1", String::class).build(),
                                ParameterSpec.builder("name2", String::class).build(),
                                ParameterSpec.builder("name3", String::class).build()
                            )

                            val function1 = FunSpec.builder("build").apply {
                                returns(className)
                                for (paramSpec in paramSpecS) {
                                    addParameter(paramSpec)
                                }
                                addParameter("entity", typeName)
                                addStatement("return %T($constructorParams)", className)
                            }.build()

                            val function2 = FunSpec.builder("build").returns(Int::class)
                                .addCode(constructorParams)
//                        .addStatement("return %T($constructorParams)", Int::class)
                                .build()

                            addFunction(function1)
                        }.build()
                    )
                    .build()
                    .writeTo(codeGenerator, Dependencies(aggregating = false, cls.containingFile!!))

            }
        }
    }

    private fun String.quotation(): String {
        return """
            $this
        """.trimIndent()
    }

    private fun FileSpec.Builder.toastIndent() = indent(" ".repeat(4))

    private inline fun <reified T : Annotation> Resolver.getSymbolsWithAnnotation() =
        getSymbolsWithAnnotation(T::class.qualifiedName!!)

    private fun KSPLogger.d(msg: Any?) {
        warn("---------------------------------------------------------------------------------------")
        warn("Message: $msg")
        warn("---------------------------------------------------------------------------------------")
    }
}
